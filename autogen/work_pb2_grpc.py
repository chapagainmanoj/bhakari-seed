# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import autogen.work_pb2 as work__pb2


class EmployeeLeaveDaysServiceStub(object):
  """Service. define the methods that the grpc server can expose to the client.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.eligibleForLeave = channel.unary_unary(
        '/work_leave.EmployeeLeaveDaysService/eligibleForLeave',
        request_serializer=work__pb2.Employee.SerializeToString,
        response_deserializer=work__pb2.LeaveEligibility.FromString,
        )
    self.grantLeave = channel.unary_unary(
        '/work_leave.EmployeeLeaveDaysService/grantLeave',
        request_serializer=work__pb2.Employee.SerializeToString,
        response_deserializer=work__pb2.LeaveFeedback.FromString,
        )


class EmployeeLeaveDaysServiceServicer(object):
  """Service. define the methods that the grpc server can expose to the client.
  """

  def eligibleForLeave(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def grantLeave(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_EmployeeLeaveDaysServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'eligibleForLeave': grpc.unary_unary_rpc_method_handler(
          servicer.eligibleForLeave,
          request_deserializer=work__pb2.Employee.FromString,
          response_serializer=work__pb2.LeaveEligibility.SerializeToString,
      ),
      'grantLeave': grpc.unary_unary_rpc_method_handler(
          servicer.grantLeave,
          request_deserializer=work__pb2.Employee.FromString,
          response_serializer=work__pb2.LeaveFeedback.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'work_leave.EmployeeLeaveDaysService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
